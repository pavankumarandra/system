elif service_int == 0x19:
    # Read status mask from test case (last column in your .txt file)
    status_mask_str = step.get("status_Mask", "").strip() if "status_Mask" in step else ""
    if status_mask_str:
        try:
            status_mask = int(status_mask_str, 16)  # Convert from hex string
        except ValueError:
            logging.warning(f"Invalid status mask '{status_mask_str}', defaulting to 0xFF")
            status_mask = 0xFF
    else:
        status_mask = 0xFF  # Default if not provided

    if subfunc != "":
        subfunc_int = int(subfunc, 16)
        raw_request = bytes([0x19, subfunc_int, status_mask])
        logging.info(f"{tc_id} - {step_desc}: Sending {raw_request.hex().upper()}")
        client.conn.send(raw_request)
        response_data = client.conn.wait_frame(timeout=2)

    elif subfunc == "":
        subfunc_clean = subfunc.strip()
        subfunc_bytes = bytes.fromhex(subfunc_clean) if subfunc_clean else b''
        expected_bytes = [int(b, 16) for b in expected.strip().split()]
        # Append status mask to the request
        raw_request = bytearray([service_int]) + subfunc_bytes + bytes([status_mask])
        logging.info(f"{tc_id} - {step_desc}: Sending {raw_request.hex().upper()}")
        client.conn.send(raw_request)
        response_data = client.conn.wait_frame(timeout=2)
