if service_int == 0x10:
    try:
        # --- Clean and validate subfunction (may be empty or multi-byte)
        subfunc_clean = subfunc.strip().replace("0x", "").replace(",", " ").replace("  ", " ").replace(" ", "")
        if subfunc_clean:
            if not all(c in "0123456789abcdefABCDEF" for c in subfunc_clean):
                raise ValueError(f"Invalid hex in subfunction: {subfunc_clean}")
            subfunc_bytes = bytes.fromhex(subfunc_clean)
        else:
            subfunc_bytes = b''  # for missing subfunction test

        # --- Build raw UDS request
        raw_request = bytearray([0x10]) + subfunc_bytes
        logging.info(f"{tc_id} - {step_desc}: Sending {raw_request.hex().upper()}")
        if oled:
            oled.display_centered_text(f"{tc_id}\nSending")
        time.sleep(0.05)

        # --- Send and receive
        client.conn.send(raw_request)
        response = client.conn.wait_frame(timeout=2)

        if response:
            response_hex = response.hex().upper()
            logging.info(f"{tc_id} - Received: {response_hex}")

            # --- Process expected response
            if expected:
                expected_clean = expected.strip().replace(" ", "")
                expected_bytes = bytes.fromhex(expected_clean)

                if response.startswith(expected_bytes[:len(response)]):
                    logging.info(f"{tc_id} - {step_desc} -> PASS")
                else:
                    logging.warning(f"{tc_id} - {step_desc} -> FAIL - Unexpected response")
            else:
                logging.info(f"{tc_id} - {step_desc} -> PASS (No expected to compare)")

        else:
            logging.warning(f"{tc_id} - No response received")
            if oled:
                oled.display_centered_text(f"{tc_id}\nNo Response")

    except ValueError as ve:
        logging.error(f"{tc_id} - Hex Error: {str(ve)}")
        if oled:
            oled.display_centered_text(f"{tc_id}\nHex Error")
    except Exception as e:
        logging.error(f"{tc_id} - Exception: {type(e).__name__} - {str(e)}")
        if oled:
            oled.display_centered_text(f"{tc_id}\nError: {str(e)[:16]}")
    finally:
        if oled:
            oled.display_centered_text(f"{tc_id}\n{step_desc[:20]}")
        time.sleep(1.5)
