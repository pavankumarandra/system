for step in steps:
    # Unpack with new columns from load_testcases
    tc_id, step_desc, service, subfunc, expected, write_data, addressing, format_type, status_mask = step

    service_int = int(service, 16) if service else None

    if service_int == 0x19:
        if subfunc != "":
            subfunc_int = int(subfunc, 16)

            # If status_mask provided in .txt, use it, else default to 0xFF
            if status_mask:
                try:
                    status_mask_int = int(status_mask, 16)
                except ValueError:
                    logging.warning(f"Invalid status mask '{status_mask}', defaulting to 0xFF")
                    status_mask_int = 0xFF
            else:
                status_mask_int = 0xFF

            raw_request = bytes([0x19, subfunc_int, status_mask_int])
            logging.info(f"{tc_id} - {step_desc}: Sending {raw_request.hex().upper()}")
