class DiagnosticTester:
    def __init__(self):
        self.tester_name = ""
        self.oled = None  # or actual OLED object
class DiagnosticTester:
    def __init__(self):
        self.tester_name = ""
        self.oled = None

    def get_tester_name(self):
        prev_name = None
        if os.path.exists("tester_info.txt"):
            with open("tester_info.txt", "r") as f:
                prev_name = f.read().strip().replace("Tester:", "").strip()

        while True:
            prompt = f"Enter Tester Name [{prev_name}]: " if prev_name else "Enter Tester Name: "
            name = input(prompt).strip()
            if not name and prev_name:
                name = prev_name
            if name:
                self.tester_name = name
                logging.info(f"Tester: {self.tester_name}")
                with open("tester_info.txt", "w") as f:
                    f.write(f"Tester: {self.tester_name}\n")
                if self.oled:
                    self.oled.display_centered_text(f"Tester:\n{self.tester_name}")
                    time.sleep(2)
                break
            else:
                print("Name cannot be empty. Please try again.")




    def start(self):
        self.get_tester_name()
        self.load_config()
        self.run_test()
        ...



generate_html_report(..., tester_name=self.tester_name)
