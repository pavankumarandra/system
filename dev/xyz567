def generate_html_report(messages_by_tc, output_path, asc_filename, start_ts, end_ts, ecu_info_data=None, target_ecu=None, base_datetime=None, tester_name=None):
    def remove_padding(data_list, pad_byte):
        return [byte for byte in data_list if byte.upper() != pad_byte.upper()]

    total = len(messages_by_tc)
    passed = sum(1 for tc in messages_by_tc.values() if all(msg["status"] == "Pass" for msg in tc))
    failed = total - passed
    duration = end_ts - start_ts
    generated_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Format Start_Timestamp and End_Timestamp
    if base_datetime:
        start_dt = base_datetime + datetime.timedelta(seconds=start_ts)
        end_dt = base_datetime + datetime.timedelta(seconds=end_ts)
        Start_Timestamp = start_dt.strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
        End_Timestamp = end_dt.strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
    else:
        Start_Timestamp = f"{start_ts:.3f} seconds"
        End_Timestamp = f"{end_ts:.3f} seconds"

    html = f"""<!DOCTYPE html>
<html>
<head><title>UDS Diagnostic Report</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
  body {{ font-family: Arial; margin: 20px; }}
  .pass {{ color: green; font-weight: bold; }}
  .fail {{ color: red; font-weight: bold; }}
  .wrapper {{
    display: flex;
    justify-content: center;
    align-items: flex-start;
    gap: 50px;
    margin-top: 20px;
  }}
  .summary-block {{ text-align: left; min-width: 250px; }}
  #chart-container {{ width: 300px; }}
  table {{ border-collapse: collapse; width: 100%; margin-top: 10px; }}
  th, td {{ border: 1px solid #ccc; padding: 8px; }}
  th {{ background: #f0f0f0; }}
  summary {{ font-weight: bold; cursor: pointer; }}
</style>
</head>
<body>

<h1 style="text-align: center;">UDS Diagnostic Report</h1>

<div style="display: flex; justify-content: flex-start; align-items: flex-start; gap: 40px; margin-top: 20px; padding-left: 10px;">
    <div style="width: 650px;">
    
        {f"<p><strong>Target ECU:</strong> {escape(target_ecu)}</p>" if target_ecu else ""}
        {"".join(f"<p><strong>{escape(k)}:</strong> {escape(v)}</p>" for k, v in ecu_info_data.items()) if ecu_info_data else ""}
        
        <hr style="width: 300px;border:1px solid #999; margin:25px 0;">
        
        <p><strong>Generated:</strong> {generated_time}</p>
        <p><strong>Tester Name:</strong> {escape(tester_name) if tester_name else "N/A"}</p>
        <p><strong>CAN Log File:</strong> {asc_filename}</p>
        <p><strong>Total Test Cases:</strong> {total}</p>
        <p class="pass"><strong>Passed:</strong> {passed}</p>
        <p class="fail"><strong>Failed:</strong> {failed}</p>
        <p><strong>Start_Time:</strong> {Start_Timestamp}</p>
        <p><strong>End_Time:</strong> {End_Timestamp}</p>
        <p><strong>Test Duration:</strong> {duration:.3f} seconds</p>
        
    </div>
    <button onclick="document.querySelectorAll('.case-block').forEach(el => el.style.display='');">Show All</button>
    <div id="chart-container" style="width: 320px; margin-left:70px;">
        <canvas id="passFailChart" width="300" height="300"></canvas>
    </div>
</div>

<script>
    const ctx = document.getElementById('passFailChart').getContext('2d');
    const chart = new Chart(ctx, {{
        type: 'pie',
        data: {{
            labels: ['Passed', 'Failed'],
            datasets: [{{
                data: [{passed}, {failed}],
                backgroundColor: ['#4CAF50', '#F44336']
            }}]
        }},
        options: {{
            responsive: true,
            onClick: function (evt, item) {{
                const segment = chart.getElementsAtEventForMode(evt, 'nearest', {{ intersect: true }}, true);
                if (!segment.length) return;
                const label = chart.data.labels[segment[0].index];
                document.querySelectorAll('.case-block').forEach(el => el.style.display = 'none');
                if (label === 'Passed') {{
                    document.querySelectorAll('.pass-case').forEach(el => el.style.display = '');
                }} else if (label === 'Failed') {{
                    document.querySelectorAll('.fail-case').forEach(el => el.style.display = '');
                }}
            }},
            plugins: {{
                legend: {{ position: 'bottom' }},
                title: {{ display: true, text: 'Test Case Results' }}
            }}
        }}
    }});
</script>
<hr><br>
"""
    # You can leave the rest of your HTML generation unchanged below this
    # ...

    with open(output_path, "w", encoding="utf-8") as f:
        f.write(html)

    print(f"✅ UDS HTML Report generated at:\n{output_path}\n")



def generate_report(asc_file_path, txt_file_path, output_html_file, allowed_tx_ids, allowed_rx_ids, ecu_info_data=None, target_ecu=None, tester_name=None):
    global DESCRIPTION_MAP
    DESCRIPTION_MAP = load_description_map(txt_file_path)
    get_description.used_tc_ids = set()

    messages_by_tc, start_ts, end_ts, base_datetime = parse_asc_file(
        asc_file_path, allowed_tx_ids, allowed_rx_ids
    )

    report_path = output_html_file

    generate_html_report(
        messages_by_tc,
        report_path,
        os.path.basename(asc_file_path),
        start_ts,
        end_ts,
        ecu_info_data,
        target_ecu,
        base_datetime,
        tester_name  # ✅ Passed to HTML report
    )

